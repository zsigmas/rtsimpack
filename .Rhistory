devtools::load_all(".")
devtools::load_all(".")
ni = 2
np = 4
nt = 10
d = expand.grid(iter=1:2, id=1:4, nt=1:10, cond=c('A','B'))
ds = shuffle_cond(d, ni, np, nt)
ds
devtools::load_all(".")
ni = 2
np = 4
nt = 10
d = expand.grid(iter=1:2, id=1:4, nt=1:10, cond=c('A','B'))
ds = shuffle_cond(d, ni, np, nt)
ds
nAd = d %>% dplyr::group_by(iter, id, cond) %>% dplyr::summarise(n=dplyr::n())
nAd
source('~/Dropbox/CienciaSobreCiencia/rtsimpack/tests/testthat/test-simulation.R', echo=TRUE)
ni = 2
np = 4
nt = 20
d = expand.grid(iter=1:ni, id=1:np, trial=1:nt/2, cond=c('A','B'))
ds = shuffle_cond(d, ni, np, nt)
nts = d %>% dplyr::group_by(iter, id, cond) %>%
dplyr::summarise(n=dplyr::n())
nts
ni = 2
np = 4
nt = 20
d = expand.grid(iter=1:ni, id=1:np, trial=1:(nt/2), cond=c('A','B'))
ds = shuffle_cond(d, ni, np, nt)
nts = d %>% dplyr::group_by(iter, id, cond) %>%
dplyr::summarise(n=dplyr::n())
nts
d[['cond']]
d[['cond']]==ds['cond']
all.equal(d[['cond']], ds['cond'])
all.equal.factor(d[['cond']], ds['cond'])
all.equal.factor(d[['cond']], ds[['cond']])
d[['cond']]==ds[['cond']]
expect_false(all(d[['cond']]==ds[['cond']]))
expect_true(all(nts==nt))
nts==nt
nts
nt
set.seed(1)
ni = 2
np = 4
ntc = 10
d = expand.grid(iter=1:ni, id=1:np, trial=1:(ntc), cond=c('A','B'))
ds = shuffle_cond(d, ni, np, ntc)
nts = d %>% dplyr::group_by(iter, id, cond) %>%
dplyr::summarise(n=dplyr::n())
nts
source('~/Dropbox/CienciaSobreCiencia/rtsimpack/tests/testthat/test-simulation.R', echo=TRUE)
Calculate preprocessing pipelines
#'
#'
d = expand.grid(iter=1:2, id=1:3, nt=10)
d[['rt_raw']] = rnorm(nrow(d))
d
d = expand.grid(iter=1:2, id=1:3, nt=1:10)
d[['rt_raw']] = rnorm(nrow(d))
d
d = expand.grid(iter=1:2, id=1:3, nt=1:10)
d[['rt_raw']] = rnorm(nrow(d))
d[['rt_log']] = log(d[['rt_raw']])
d[['rt_inv']] = 1/d[['rt_raw']]
d = expand.grid(iter=1:2, id=1:3, nt=1:10)
d[['rt_raw']] = abs(rnorm(nrow(d)))
d[['rt_log']] = log(d[['rt_raw']])
d[['rt_inv']] = 1/d[['rt_raw']]
d
d = shuffle_cond(d)
devtools::load_all(".")
d = get_dummy_df(2,3,10)
devtools::load_all(".")
d = get_dummy_df(2,3,10)
#' Create dummy data frame
get_dummy_df = function(ni, np, ntc){
d = expand.grid(iter=1:ni, id=1:np, nt=1:ntc, condition=c('A', 'B'))
d[['rt_raw']] = abs(rnorm(nrow(d)))
d[['rt_log']] = log(d[['rt_raw']])
d[['rt_inv']] = 1/d[['rt_raw']]
d = shuffle_cond(d)
return(d)
}
d = get_dummy_df(2,3,10)
devtools::load_all(".")
devtools::load_all(".")
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d = shuffle_cond(d, ni, np, ntc)
d = expand.grid(iter=1:ni, id=1:np, nt=1:ntc, condition=c('A', 'B'))
d[['rt_raw']] = abs(rnorm(nrow(d)))
d[['rt_log']] = log(d[['rt_raw']])
d[['rt_inv']] = 1/d[['rt_raw']]
d
d = shuffle_cond(d, ni, np, ntc)
d
d = shuffle_cond(d, ni, np, ntc)
devtools::load_all(".")
devtools::load_all(".")
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d = expand.grid(iter=1:ni, id=1:np, nt=1:ntc, condition=c('A', 'B'))
d[['rt_raw']] = abs(rnorm(nrow(d)))
d[['rt_log']] = log(d[['rt_raw']])
d[['rt_inv']] = 1/d[['rt_raw']]
d = shuffle_cond(d, ni, np, ntc)
return(d)
d
d = get_dummy_df(2,3,10)
#' Create dummy data frame
get_dummy_df = function(ni, np, ntc){
d = expand.grid(iter=1:ni, id=1:np, nt=1:ntc, condition=c('A', 'B'))
d[['rt_raw']] = abs(rnorm(nrow(d)))
d[['rt_log']] = log(d[['rt_raw']])
d[['rt_inv']] = 1/d[['rt_raw']]
d = shuffle_cond(d, ni, np, ntc)
return(d)
}
d = get_dummy_df(2,3,10)
devtools::load_all(".")
d = get_dummy_df(2,3,10)
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
devtools::load_all(".")
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d = rtsimpack::compute_pp(d)
devtools::load_all(".")
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d = rtsimpack::compute_pp(d)
d
View(d)
d = compute_agg(d)
devtools::load_all(".")
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d = rtsimpack::compute_pp(d)
d = compute_agg(d)
d
warnings()
d
use_package(purrr)
use_package('purrr')
devtools::load_all(".")
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d = rtsimpack::compute_pp(d)
d = compute_agg(d)
d
View(d)
devtools::load_all(".")
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d = rtsimpack::compute_pp(d)
d = compute_agg(d)
d
d = expand.grid(iter=1:ni, id=1:np, nt=1:ntc, condition=c('A', 'B'))
d[['rt_raw']] = abs(rnorm(nrow(d)))
d[['rt_log']] = log(d[['rt_raw']])
d[['rt_inv']] = 1/d[['rt_raw']]
d = select(d, -nt)
devtools::load_all(".")
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d = rtsimpack::compute_pp(d)
d = compute_agg(d)
d
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d
#' Create dummy data frame
get_dummy_df = function(ni, np, ntc){
d = expand.grid(iter=1:ni, id=1:np, nt=1:ntc, condition=c('A', 'B'))
d[['rt_raw']] = abs(rnorm(nrow(d)))
d[['rt_log']] = log(d[['rt_raw']])
d[['rt_inv']] = 1/d[['rt_raw']]
d = dplyr::select(d, -nt)
d = shuffle_cond(d, ni, np, ntc)
return(d)
}
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d = rtsimpack::compute_pp(d)
d = compute_agg(d)
d
View(d)
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
View(d)
devtools::load_all(".")
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
View(d)
d = rtsimpack::compute_pp(d)
View(d)
devtools::load_all(".")
d = expand.grid(iter=1:ni, id=1:np, nt=1:ntc, condition=c('A', 'B'))
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
devtools::load_all(".")
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d
View(d)
d = rtsimpack::compute_pp(d)
d = compute_agg(d)
d
d
devtools::load_all(".")
d
d %>% group_by(iter, id) %>% summarise_all(diff)
library(dplyr)
d %>% group_by(iter, id) %>% summarise_all(diff)
d %>% group_by(iter, id) %>% summarise_all(.-lag(.))
d %>% group_by(iter, id) %>% summarise_all(.funs = ~(.-lag(.)))
d %>% group_by(iter, id) %>% summarise_all(.funs = ~(mean(.)))
d %>% group_by(iter, id) %>% summarise_all(.funs = list(~(mean(.))))
d %>% group_by(iter, id) %>% summarise_if(is.numeric, .funs = list(~(mean(.))))
d %>% group_by(iter, id) %>% summarise_if(is.numeric, .funs = list(~(lag(.))))
d %>% group_by(iter, id) %>% summarise_if(is.numeric, .funs = list(~(.[1]-.[2]))
)
x = d %>% group_by(iter, id) %>% summarise_if(is.numeric, .funs = list(~(.[1]-.[2]))
)
View(x)
View(d)
0.6671504-0.7442944
x = d %>% group_by(iter, id) %>%
summarise_if(is.numeric, .funs = list(~(.[1]-.[2]))) %>%
group_by(iter) %>% summarise_all(list('sd'=sd, 'mean'=mean))
x
View(x)
x = rnoram(100)
x = rnorm(100)
t.test(x)
t_test = function(v, np){
s = sd(v)
m = mean(v)
t = m/(s/sqrt(n))
p = q(t, df=np-1)
}
t_test(x)
t_test(x,100)
t_test = function(v, np){
s = sd(v)
m = mean(v)
t = m/(s/sqrt(np))
p = q(t, df=np-1)
}
t_test(x,100)
t_test(x,100)
t_test = function(v, np){
s = sd(v)
m = mean(v)
t = m/(s/sqrt(np))
p = qt(t, df=np-1)
}
t_test(x,100)
v =x
s = sd(x)
m = mean(x)
t = m/(s/sqrt(np))
np=100
s = sd(x)
m = mean(x)
t = m/(s/sqrt(np))
p = qt(t, df=np-1)
t
pt(t, df=np-1)
t.test(x)
pt(t, df=np-1)
pt(t, df=np-1)*2
t.test(x)$p.value
np = nrow(d)/length(unique(d[['iter']])) # Number of participants, maybe pass as parameter
x = d %>% group_by(iter, id) %>%
summarise_if(is.numeric, .funs = list(~(.[1]-.[2]))) %>%
group_by(iter) %>% summarise_all(list('p'=t_test))
x = d %>% group_by(iter, id) %>%
summarise_if(is.numeric, .funs = list(~(.[1]-.[2])))
x
x = d %>% group_by(iter, id) %>%
summarise_if(is.numeric, .funs = list(~(.[1]-.[2])))
View(x)
x %>% group_by(iter) %>% summarise_all(list('p'=t_test))
View(x)
x %>% select(-id) %>%  group_by(iter) %>% summarise_all(list('p'=t_test))
np = nrow(d)/length(unique(d[['iter']])) # Number of participants, maybe pass as parameter
purrr::partial(t_test, np=np)
x = d %>% group_by(iter, id) %>%
summarise_if(is.numeric, .funs = list(~(.[1]-.[2]))) %>%
group_by(iter) %>% summarise_all(t_test)
devtools::load_all(".")
np = nrow(d)/length(unique(d[['iter']])) # Number of participants, maybe pass as parameter
purrr::partial(t_test, np=np)
x = d %>% group_by(iter, id) %>%
summarise_if(is.numeric, .funs = list(~(.[1]-.[2]))) %>%
group_by(iter) %>% summarise_all(t_test)
devtools::load_all(".")
np = nrow(d)/length(unique(d[['iter']])) # Number of participants, maybe pass as parameter
t_test_part = purrr::partial(t_test, np=np)
x = d %>% group_by(iter, id) %>%
summarise_if(is.numeric, .funs = list(~(.[1]-.[2]))) %>%
group_by(iter) %>% summarise_all(t_test_part)
warnings()
devtools::load_all(".")
t_test
devtools::load_all(".")
t_test
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d = rtsimpack::compute_pp(d)
d = compute_agg(d)
np = nrow(d)/length(unique(d[['iter']])) # Number of participants, maybe pass as parameter
t_test_part = purrr::partial(t_test, np=np)
x = d %>% group_by(iter, id) %>%
summarise_if(is.numeric, .funs = list(~(.[1]-.[2]))) %>%
group_by(iter) %>% summarise_all(t_test_part)
x
pt
x = rnorm(10)
t.test(x)
t.test(x)$p.value
mean(x)/(sd(x)/sqrt(10))
pt(mean(x)/(sd(x)/sqrt(10)), df=9)
pt(mean(x)/(sd(x)/sqrt(10)), df=9, lower.tail = TRUE)
pt(mean(x)/(sd(x)/sqrt(10)), df=9, lower.tail = FALSE)
pt(mean(x)/(sd(x)/sqrt(10)), df=9, lower.tail = FALSE)*2
mean(x)
t.test(-x)$p.value
pt(mean(-x)/(sd(x)/sqrt(10)), df=9, lower.tail = FALSE)*2
pt(mean(-x)/(sd(x)/sqrt(10)), df=9, lower.tail = TRUE)*2
t.test(-x, alternative = 'greater')$p.value
pt(mean(-x)/(sd(x)/sqrt(10)), df=9)
pt(mean(-x)/(sd(x)/sqrt(10)), df=9, lower.tail = TRUE)
pt(mean(-x)/(sd(x)/sqrt(10)), df=9, lower.tail = FALSE)
t.test()
t.test
pt(mean(-x)/(sd(x)/sqrt(10)), df=9, lower.tail = FALSE)
t.test(-x, alternative = 'greater')$p.value
# PROBLEMS WITH ONE TAIL AND TWO TAILS
t_test = function(x, np){
s = sd(x)
m = mean(x)
t = m/(s/sqrt(np))
p = pt(t, df=np-1, lower.tail = m<0)
return(p)
}
t_test(x)
t_test(x, 9)
t.test(x)
t_test(x, 9)*2
t.test(x)
# PROBLEMS WITH ONE TAIL AND TWO TAILS
t_test = function(x, np){
s = sd(x)
m = mean(x)
t = m/(s/sqrt(np))
p = pt(t, df=np-1, lower.tail = m<0)
return(t)
}
t_test(x, 9)
t.test(x)
s = sd(x)
m = mean(x)
m
t = m/(s/sqrt(np-1))
t
t = m/(s/sqrt(np))
t
np=10
np = 10
x = rnorm(np)
s = sd(x)
m = mean(x)
t = m/(s/sqrt(np-1))
p = pt(t, df=np-1, lower.tail = m<0)
t.test(x)
t = m/(s/sqrt(np))
p = pt(t, df=np-1, lower.tail = m<0)
p = pt(t, df=np-1, lower.tail = m<0)*2
devtools::load_all(".")
np=100
x = rnorm(np)
t.test(x)
t_test(x,np)
s = sd(x)
m = mean(x)
t = m/(s/sqrt(np))
p = pt(t, df=np-1, lower.tail = m>0)*2
devtools::load_all(".")
t_test(x,np)
devtools::load_all(".")
t_test(x,np)
t.test(x)$p.value
t_test(x,np)
t_test(x,np)*2
set.seed(1)
ni = 2
np = 4
ntc = 10
d = expand.grid(iter=1:ni, id=1:np, trial=1:(ntc), cond=c('A','B'))
ds = shuffle_cond(d, ni, np, ntc)
nts = d %>% dplyr::group_by(iter, id, cond) %>%
dplyr::summarise(n=dplyr::n()) %>%
dplyr::pull(n)
View(d)
View(ds)
devtools::load_all(".")
#' #' TESTING SIMULATION LOOP
#'
d = get_dummy_df(2,3,10)
d = rtsimpack::compute_pp(d)
d = compute_agg(d)
np = nrow(d)/length(unique(d[['iter']])) # Number of participants, maybe pass as parameter
t_test_part = purrr::partial(t_test, np=np)
x = d %>% group_by(iter, id) %>%
summarise_if(is.numeric, .funs = list(~(.[1]-.[2]))) %>%
group_by(iter) %>% summarise_all(t_test_part)
x
One iteration
#'
#'
One iteration
#'
#'
#'
use_package("parallel")
use_package("pbapply")
d[['ids']] %in% c(1,1)
d[['id']] %in% c(1,1)
which(d[['id']] %in% c(1,1))
d
devtools::load_all(".")
?shuffle_cond
?rtsimpack::shuffle_cond()
devtools::document()
?rtsimpack::shuffle_cond()
?shuffle_cond()
library(rtsimpack)
devtools::document()
library(rtsimpack)
?shuffle_cond()
?shuffle_cond()
?shuffle_cond()
devtools::document()
?shuffle_cond()
library(rtsimpack)
?shuffle_cond()
library(rtsimpack)
?compute_pp
library(rtsimpack)
?compute_pp
?compute_pp
library(rtsimpack)
library(rtsimpack)
?compute_gg
?compute_agg
library(rtsimpack)
?compute_agg
f = "/home/zsigmas/Dropbox/CienciaSobreCiencia/rtsimpack/inst/test_data/test_comma.csv"
r = run_simulation(f, ni=1000, np=3, nipi=1000)
rbenchmark::benchmark("1" = run_simulation(f, ni=1000, np=3, nipi=1),
"10" = run_simulation(f, ni=1000, np=3, nipi=10),
"100" = run_simulation(f, ni=1000, np=3, nipi=100),
"1000" = run_simulation(f, ni=1000, np=3, nipi=1000),
replications=10,
columns=c('elapsed', 'relative'))
rbenchmark::benchmark("1" = run_simulation(f, ni=1000, np=2, nipi=1),
"10" = run_simulation(f, ni=1000, np=2, nipi=10),
"100" = run_simulation(f, ni=1000, np=2, nipi=100),
"1000" = run_simulation(f, ni=1000, np=2, nipi=1000),
replications=3,
columns=c('elapsed', 'relative'))
rbenchmark::benchmark("1" = run_simulation(f, ni=100, np=30, nipi=1),
"5" = run_simulation(f, ni=100, np=30, nipi=5),
"10" = run_simulation(f, ni=100, np=30, nipi=10),
"50" = run_simulation(f, ni=100, np=30, nipi=50),
"100" = run_simulation(f, ni=100, np=30, nipi=100),
replications=3,
columns=c('test', 'elapsed', 'relative'))
r = run_simulation(f, ni=10, np=20, nipi=1)
r = run_simulation(f, ni=100, np=20, nipi=10)
